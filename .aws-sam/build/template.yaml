AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'my-chat-app

  Sample SAM Template for my-chat-app

  '
Globals:
  Function:
    Timeout: 3
Parameters:
  SubcribeTable:
    Type: String
    Default: my_connectionsIds
    Description: this name crate the dynamodb to store the id of the connected client
  SubcribTopic:
    Type: String
    Default: my_Topics
    Description: this table used for get the Arn for specific topic
Resources:
  ChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: chatWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: connectionRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ConnectionInteg
  ConnectionInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatWebSocket
      Description: connect Intergration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: disconnectionRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: DisConnectionInteg
  DisConnectionInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatWebSocket
      Description: Disconnect Intergration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisConnectFunction.Arn}/invocations
  SubcriptionRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatWebSocket
      RouteKey: Subcribtion
      AuthorizationType: NONE
      OperationName: subcribtion
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: SubcribtionInteg
  SubcribtionInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatWebSocket
      Description: subcription Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnSubcribtionFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: ChatWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: ChatWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisConnectRoute
    - SendRoute
    - SubcriptionRoute
    Properties:
      ApiId:
        Ref: ChatWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Stag
      Description: Stage of Stag
      DeploymentId:
        Ref: Deployment
      ApiId:
        Ref: ChatWebSocket
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: connectionId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      TableName:
        Ref: SubcribeTable
  TopicTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: topicName
        AttributeType: S
      KeySchema:
      - AttributeName: topicName
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      TableName:
        Ref: SubcribTopic
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: message
        AttributeType: S
      KeySchema:
      - AttributeName: message
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
      TableName: Messages
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: OnConnectFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: SubcribeTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SubcribeTable
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: OnDisConnectFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: SubcribeTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SubcribeTable
  OnDisConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnDisConnectFunction
      Principal: apigateway.amazonaws.com
  OnSubcribtionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: OnSubcribtionFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: SubcribeTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SubcribeTable
  OnSubcribtionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: OnSubcribtionFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SendMessageFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: SubcribeTable
          CALLBACK_URL:
            Fn::Sub: ${ChatWebSocket}.execute-api.${AWS::Region}.amazonaws.com/Stag
      Events:
        Api:
          Type: Api
          Properties:
            Method: post
            Path: /notification
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SubcribeTable
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          Resource:
          - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatWebSocket}/*
  TopicInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: WebSocketTopic
      FunctionName:
        Ref: SendMessageFunction
  PublishMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PublishMessageFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TOPIC_WEBSOCKET:
            Ref: WebSocketTopic
          TOPIC_QUEUE:
            Ref: QueueTopic
      Events:
        Api:
          Type: Api
          Properties:
            Method: post
            Path: /publish
      Policies:
      - SNSCrudPolicy:
          TopicName: '*'
  PollMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: PollMessageFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          QUEUE_URL:
            Ref: TransactionQueue
      Events:
        Api:
          Type: Api
          Properties:
            Method: get
            Path: /poll
      Policies:
      - DynamoDBCrudPolicy:
          TableName: Messages
      - SQSPollerPolicy:
          QueueName: '*'
  CreatTopicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreatTopicFunction
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME:
            Ref: SubcribTopic
          SNS_Subcribtion:
            Ref: SendMessageFunction
      Events:
        Api:
          Type: Api
          Properties:
            Method: post
            Path: /create
      Policies:
      - SNSCrudPolicy:
          TopicName: '*'
      - DynamoDBCrudPolicy:
          TableName:
            Ref: SubcribTopic
  WebSocketTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - SendMessageFunction
          - Arn
        Protocol: lambda
      TopicName: clientNotification
  QueueTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - TransactionQueue
          - Arn
        Protocol: sqs
      TopicName: massageQueue
  TransactionQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: Transactions
  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - Ref: TransactionQueue
      PolicyDocument:
        Id: AllowIncomingAccess
        Statement:
        - Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action:
          - sqs:SendMessage
          - sqs:ReceiveMessage
          Resource: '*'
Outputs:
  ProdDataEndpoint:
    Description: API Prod stage endpoint
    Value:
      Fn::Sub: https://${PublishMessageFunction}.execute-api.${AWS::Region}.amazonaws.com/Stag/
  PollEndPoint:
    Description: API for poll
    Value:
      Fn::Sub: https://${PollMessageFunction}.execute-api.${AWS::Region}.amazonaws.com/Prod/
